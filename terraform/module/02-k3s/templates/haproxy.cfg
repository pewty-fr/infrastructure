global
    log /dev/log    local4      warning
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    maxconn     100000
    #nbthread 16
    #  stats bind-process 1 # to be used only with nbproc > 1.
    cpu-map 1- 0-

    # Default SSL material locations
    ca-base /etc/pki/cert
    crt-base /etc/pki/cert

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DSS:!DES
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DSS:!DES
    ssl-default-server-options no-sslv3 no-tls-tickets

    # http://cbonte.github.io/haproxy-dconv/1.7/snapshot/configuration.html#tune.ssl.cachesize
    tune.ssl.cachesize 100000

    # Default 16384 doesn't allow our 50KB error files. They get truncated
    tune.bufsize 65536

defaults
    log         global
    mode        http
    option      forwardfor header X-Real-IP # X-Fowarded-For is set in frontend, because with the forwardfor option, another xff header is added. It's an rfc's behavior but it is not suitable to most of our use-cases with Nginx, Varnish and stuff.
    option      dontlognull
    # connections which experience errors, timeouts, retries, redispatches or HTTP status codes 5xx will see their syslog level raised from "info" to "err"
    option      log-separate-errors
    option      log-health-checks
    maxconn     1000000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    ###################
    # Custom log format
    ###################
    log-format https-rw|%[capture.req.hdr(0)]|%s|%si|%[ssl_bc_cipher]|%[ssl_bc_protocol]|%Tc|%Tw|%bc|%bq|%rc|%Tr|%Tl|%ci|%fp|%r|%[capture.res.hdr(0)]|%ST|%[capture.res.hdr(1)]|%[capture.req.hdr(1)]|%[capture.req.hdr(2)]|%[capture.req.hdr(3)]|%sslc|%sslv|%Tq|%fc|%Tt

    ###################
    # Timeouts
    ###################
    option http-keep-alive
    timeout http-keep-alive 3600s
    # client: in HTTP mode, this timeout is particularly important to consider during the first phase, when the client sends the request, and during the response while it is reading data sent by the server.
    timeout client 240s
    # maximum time to wait for a connection attempt to a server
    timeout connect 60s
    # Set the number of retries to perform on a server after a connection failure
    retries     1
    # Set the maximum inactivity time on the server side.
    timeout server 240s
    # enable early dropping of aborted requests pending in queues
    option abortonclose

    ###################
    # HealthCheck
    ###################
    # Bear in mind that DNS resolution is triggered by health checks. This makes health checks mandatory to allow DNS resolution.
    # Check every 10s ; 3 fails = !healthy ; 1 '200 OK' = healthy
    default-server inter 10s fall 3 rise 1 resolve-prefer ipv4
    # All 2xx and 3xx are considered 'OK'. We limit that behavior to 200 only
    http-check expect status 200

frontend stats
    bind ${PRIVATE_IP}:8404
    bind ${PRIVATE_IPV6}:8404
    stats enable
    stats uri /stats
    stats refresh 5s
    stats hide-version

frontend 80
    bind *:80
    bind :::80
    redirect scheme https code 301 if !{ ssl_fc }

frontend private
    bind ${PRIVATE_IP}:443 ssl crt /etc/ssl/private/pem
    bind ${PRIVATE_IPV6}:443 ssl crt /etc/ssl/private/pem
    monitor-uri /haproxycheck

    http-request del-header Proxy
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Forwarded-By %[dst]
    http-request set-header X-Forwarded-Proto https
    http-request set-header X-Scheme https
    http-request set-header X-Real-IP %[src]

    capture request header Host                  len 256

    http-response del-header ^(Via|Server):

    use_backend %[base,map_reg(/etc/haproxy/domaintobackend-private.map,bk_default)]

frontend public
    bind *:443 ssl crt /etc/ssl/private/pem
    bind ${PUBLIC_IPV6}:443 ssl crt /etc/ssl/private/pem
    monitor-uri /haproxycheck

    http-request del-header Proxy
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Forwarded-By %[dst]
    http-request set-header X-Forwarded-Proto https
    http-request set-header X-Scheme https
    http-request set-header X-Real-IP %[src]

    capture request header Host                  len 256

    http-response del-header ^(Via|Server):

    # acl network_allowed src {{ private_network }}
    # acl network_allowed_v6 src {{ private_network_v6 }}
    # use_backend %[base,map_reg(/etc/haproxy/domain2backend-443-private.map,bk_default)] if network_allowed and network_allowed_v6

    use_backend %[base,map_reg(/etc/haproxy/domaintobackend-public.map,bk_default)]

backend localhost
    http-response add-header X-Backend-Server %s
    server traefik localhost:$${TRAEFIK_PORT}
